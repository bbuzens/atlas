@startuml

frame DESKTOP {
    component IDE [
        Integrated Development Environment : Celui que le dév voudra utiliser
        ]
    component CONTAINERS_LOCAL [
        Serveur de conteneurs local : Docker Desktop
        ]
    component VCS_CLIENT [
        Client VCS : Git
        ]
    }

component ORCHESTRATOR [
    Orchestrateur : Jenkins
    Dirige l'exécution automatisée d'une ou partie de ligne de production logicielle
    ]

component CONTAINERS [
    Serveur de conteneurisation : Docker
    Permet de créer et exécuter des conteneurs (sorte de systèmes virtuels)
    Intérêt :
        * Maîtrise du contexte d'exécution (images)
        * Séparation des contextes
        * Indépendant du système hôte
        * Optimisation de l'utilisation des ressources (création/destruction en fonction du besoin)
        * Généricité apportée par la couche de composition (docker-compose)
        * Porteur d'une implémentation du paradigme Infrastructure as Code
    ]

component VCS [
    Version Control System : GitLab
    Stocke le code et ses modifications pour :
        * scripts, données et documentation des tests
        * code, conf et documentation des outils de test
    ]

component BRM [
    Binary Repository Manager : JFrog Artifactory
    Stocke les paquets de binaires pour un ensemble de technologies variées
        * tar balls
        * images Docker
        * packages Python ou Java
    ]

component SUT [
    System Under Test
    Tout système à tester avec l'infrastructure
    ]


IDE -- VCS_CLIENT : Plugin
IDE -- CONTAINERS_LOCAL : Plugin

VCS_CLIENT --> VCS : PULL
CONTAINERS_LOCAL --> BRM : GET
CONTAINERS_LOCAL --> SUT : f(SUT)
VCS_CLIENT --> VCS : PUSH
VCS --> ORCHESTRATOR : WebHook
ORCHESTRATOR --> CONTAINERS : SSH
VCS <-- CONTAINERS : PULL
CONTAINERS --> BRM : POST

@enduml